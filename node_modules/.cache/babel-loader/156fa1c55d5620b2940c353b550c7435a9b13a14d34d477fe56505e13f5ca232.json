{"ast":null,"code":"import { createSlice, nanoid } from '@reduxjs/toolkit';\nconst initialState = {\n  tasks: {\n    \"sample-1\": {\n      id: 'sample-1',\n      title: 'Brainstorming',\n      description: \"Brainstorming brings team members' diverse experience into play.\",\n      priority: 'Low',\n      category: 'General',\n      dueDate: null,\n      status: 'todo',\n      createdAt: new Date().toISOString()\n    },\n    \"sample-2\": {\n      id: 'sample-2',\n      title: 'Research',\n      description: 'User research helps you create an optimal product for users.',\n      priority: 'High',\n      category: 'Work',\n      dueDate: null,\n      status: 'todo',\n      createdAt: new Date().toISOString()\n    },\n    \"sample-3\": {\n      id: 'sample-3',\n      title: 'Wireframes',\n      description: 'Low fidelity wireframes include the most basic content and visuals.',\n      priority: 'Low',\n      category: 'Design',\n      dueDate: null,\n      status: 'inprogress',\n      createdAt: new Date().toISOString()\n    },\n    \"sample-4\": {\n      id: 'sample-4',\n      title: 'Design System',\n      description: 'It just needs to adapt the UI from what you did before.',\n      priority: 'Low',\n      category: 'Design',\n      dueDate: null,\n      status: 'done',\n      createdAt: new Date().toISOString()\n    }\n  }\n};\nconst tasksSlice = createSlice({\n  name: 'tasks',\n  initialState,\n  reducers: {\n    addTask: {\n      reducer(state, action) {\n        const t = action.payload;\n        state.tasks[t.id] = t;\n      },\n      prepare({\n        title,\n        description,\n        priority = 'Low',\n        category = 'General',\n        dueDate = null,\n        status = 'todo'\n      }) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            description,\n            priority,\n            category,\n            dueDate,\n            status,\n            createdAt: new Date().toISOString()\n          }\n        };\n      }\n    },\n    updateTask(state, action) {\n      const {\n        id,\n        changes\n      } = action.payload;\n      if (state.tasks[id]) state.tasks[id] = {\n        ...state.tasks[id],\n        ...changes\n      };\n    },\n    deleteTask(state, action) {\n      delete state.tasks[action.payload];\n    },\n    moveTask(state, action) {\n      const {\n        id,\n        status\n      } = action.payload;\n      if (state.tasks[id]) state.tasks[id].status = status;\n    },\n    bulkSet(state, action) {\n      state.tasks = action.payload || {};\n    }\n  }\n});\nexport const {\n  addTask,\n  updateTask,\n  deleteTask,\n  moveTask,\n  bulkSet\n} = tasksSlice.actions;\nexport default tasksSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","initialState","tasks","id","title","description","priority","category","dueDate","status","createdAt","Date","toISOString","tasksSlice","name","reducers","addTask","reducer","state","action","t","payload","prepare","updateTask","changes","deleteTask","moveTask","bulkSet","actions"],"sources":["C:/Users/Indra/Downloads/creative-upaay-dashboard/mnt/data/creative-upaay-dashboard/src/redux/slices/tasksSlice.js"],"sourcesContent":["import { createSlice, nanoid } from '@reduxjs/toolkit';\n\nconst initialState = {\n  tasks: {\n    \"sample-1\": { id: 'sample-1', title: 'Brainstorming', description: \"Brainstorming brings team members' diverse experience into play.\", priority: 'Low', category: 'General', dueDate: null, status: 'todo', createdAt: new Date().toISOString() },\n    \"sample-2\": { id: 'sample-2', title: 'Research', description: 'User research helps you create an optimal product for users.', priority: 'High', category: 'Work', dueDate: null, status: 'todo', createdAt: new Date().toISOString() },\n    \"sample-3\": { id: 'sample-3', title: 'Wireframes', description: 'Low fidelity wireframes include the most basic content and visuals.', priority: 'Low', category: 'Design', dueDate: null, status: 'inprogress', createdAt: new Date().toISOString() },\n    \"sample-4\": { id: 'sample-4', title: 'Design System', description: 'It just needs to adapt the UI from what you did before.', priority: 'Low', category: 'Design', dueDate: null, status: 'done', createdAt: new Date().toISOString() }\n  }\n};\n\nconst tasksSlice = createSlice({\n  name: 'tasks',\n  initialState,\n  reducers: {\n    addTask: {\n      reducer(state, action) {\n        const t = action.payload;\n        state.tasks[t.id] = t;\n      },\n      prepare({ title, description, priority = 'Low', category = 'General', dueDate = null, status = 'todo' }) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            description,\n            priority,\n            category,\n            dueDate,\n            status,\n            createdAt: new Date().toISOString()\n          }\n        };\n      }\n    },\n    updateTask(state, action) {\n      const { id, changes } = action.payload;\n      if (state.tasks[id]) state.tasks[id] = { ...state.tasks[id], ...changes };\n    },\n    deleteTask(state, action) {\n      delete state.tasks[action.payload];\n    },\n    moveTask(state, action) {\n      const { id, status } = action.payload;\n      if (state.tasks[id]) state.tasks[id].status = status;\n    },\n    bulkSet(state, action) {\n      state.tasks = action.payload || {};\n    }\n  }\n});\n\nexport const { addTask, updateTask, deleteTask, moveTask, bulkSet } = tasksSlice.actions;\nexport default tasksSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}